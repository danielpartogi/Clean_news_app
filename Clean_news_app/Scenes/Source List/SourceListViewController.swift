//
//  SourceListViewController.swift
//  Clean_news_app
//
//  Created by daniel on 18/05/20.
//  Copyright (c) 2020 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SourceListDisplayLogic: class
{
    func displaySources(viewModel: SourceList.Sources.ViewModel)
}

class SourceListViewController: UITableViewController, SourceListDisplayLogic, UISearchBarDelegate
{
    var interactor: SourceListBusinessLogic?
    var router: (NSObjectProtocol & SourceListRoutingLogic & SourceListDataPassing)?
    
    let searchBar = UISearchBar()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SourceListInteractor()
        let presenter = SourceListPresenter()
        let router = SourceListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        if let button = self.navigationItem.rightBarButtonItem {
            button.isEnabled = false
        }
        tableView.register(UINib.init(nibName: "SourceTableViewCell", bundle: nil), forCellReuseIdentifier: "sourceCell")
        navigationItem.title = router?.dataStore?.category.rawValue
        fetchSources()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func fetchSources()
    {
        interactor?.getSources()
        showSpinner(onView: self.tableView)
    }
    
    func displaySources(viewModel: SourceList.Sources.ViewModel)
    {
        self.removeSpinner()
        switch viewModel.data {
        case .success(let data):
            self.interactor?.setSources(sources: data)
            self.tableView.reloadData()
        case .failure(let err):
            self.popupAlert(title: "Error", message: err.localizedDescription.description, actionTitles: ["OK"], actions: [{
                action in
                self.navigationController?.popViewController(animated: true)
                }])
        }
    }
    
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        view.endEditing(true)
        if let button = self.navigationItem.rightBarButtonItem {
            button.isEnabled = true
        }
        tableView.scrollsToTop = true
        interactor?.filterSource(text: searchBar.text)
        
    }
    
    @IBAction func clearButtonClicked(_ sender: Any) {
        
        searchBarCancelButtonClicked(searchBar)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        
        tableView.scrollsToTop = true
        searchBar.text = ""
        interactor?.getSources()
        self.showSpinner(onView: self.view)
    }
    
}

// MARK: HANDLING SOURCE LIST TABLE VIEW
extension SourceListViewController {
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        router?.dataStore?.sources?.sources.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "sourceCell", for: indexPath) as! SourceTableViewCell
        guard let data = router?.dataStore?.sources?.sources else {return cell}
        
        cell.nameLabel.text = data[indexPath.row].name
        cell.descLabel.text = data[indexPath.row].description
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let data = router?.dataStore?.sources?.sources else {return}
        interactor?.setSelectedSource(source: data[indexPath.row])
        performSegue(withIdentifier: "NewsList", sender: nil)
    }
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let v = UIView()
        v.backgroundColor = .white
        searchBar.placeholder = "Search"
        searchBar.frame = CGRect(x: 0, y: 0, width: (navigationController?.view.bounds.size.width)!, height: 64)
        searchBar.barStyle = .default
        searchBar.isTranslucent = false
        searchBar.delegate = self
        searchBar.barTintColor = UIColor.white
        searchBar.backgroundImage = UIImage()
        v.addSubview(searchBar)
        return v
    }
}
