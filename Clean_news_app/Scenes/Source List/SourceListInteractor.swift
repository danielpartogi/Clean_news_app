//
//  SourceListInteractor.swift
//  Clean_news_app
//
//  Created by daniel on 18/05/20.
//  Copyright (c) 2020 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SourceListBusinessLogic
{
    func getSources()
    func setSources(sources: SourceListModel)
    func setSelectedSource(source: Source)
    func filterSource(text:String?)
}

protocol SourceListDataStore
{
    var category: CategoryEnum {get set}
    var sources: SourceListModel? {get set}
    var selectedSource: Source? {get set}
}

class SourceListInteractor: SourceListBusinessLogic, SourceListDataStore
{
    var presenter: SourceListPresentationLogic?
    var worker: SourceListWorker?
    var sources: SourceListModel?
    var category: CategoryEnum = .general
    var selectedSource: Source?
    
    // MARK: Do something
    
    func getSources()
    {
        worker = SourceListWorker()
        
        worker?.getSources(category: self.category.rawValue){ data in
            let response = SourceList.Sources.Response(data: data)
            self.presenter?.presentSource(response: response)
        }
        
    }
    
    func setSources(sources: SourceListModel){
        self.sources = sources
    }
    
    func setSelectedSource(source: Source) {
        self.selectedSource = source
    }
    
    func filterSource(text: String?){
        guard var sources =  self.sources else {return}
        let filteredData = sources.sources.filter { source -> Bool in
            guard let name = source.name?.lowercased() else {return false}
            guard let searchedText = text?.lowercased() else {return false}
            return name.contains(searchedText)
        }
        sources.sources = filteredData
        let data: Result<SourceListModel,Error> = .success(sources)
        presenter?.presentSource(response: SourceList.Sources.Response(data: data))
    }
}
