//
//  NewsListViewController.swift
//  Clean_news_app
//
//  Created by daniel on 18/05/20.
//  Copyright (c) 2020 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsListDisplayLogic: class
{
    func displayNewsList(viewModel: NewsList.News.ViewModel)
    func displayPageFinished()
}

class NewsListViewController: UITableViewController, NewsListDisplayLogic, UISearchBarDelegate
{
    var interactor: NewsListBusinessLogic?
    var router: (NSObjectProtocol & NewsListRoutingLogic & NewsListDataPassing)?
    
    let searchBar = UISearchBar()
    var isLoading = false
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = NewsListInteractor()
        let presenter = NewsListPresenter()
        let router = NewsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableView.register(UINib.init(nibName: "NewsCellTableViewCell", bundle: nil), forCellReuseIdentifier: "NewsCell")
        navigationItem.title = router?.dataStore?.source?.name
        if let button = self.navigationItem.rightBarButtonItem {
            button.isEnabled = false
        }
        fetchNews()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func fetchNews()
    {
        isLoading = true
        let request = NewsList.News.Request(page: 1, query: nil)
        interactor?.getNews(request: request)
        self.showSpinner(onView: self.tableView)
    }
    
    func displayNewsList(viewModel: NewsList.News.ViewModel)
    {
        self.removeSpinner()
        switch viewModel.data {
        case .success(let data):
            interactor?.addArticles(articles: data.articles)
            interactor?.setNews(news: data)
            if(router?.dataStore?.articles.count == 0){
                self.popupAlert(title: "News Not Found", message: "Your News Not Found, Try Different source or search again", actionTitles: ["OK"], actions: [{ _ in
                }])
            }
            
            tableView.reloadData()
        case .failure(let err):
            self.popupAlert(title: "Error", message: err.localizedDescription.description, actionTitles: ["OK"], actions: [{ action in
                self.navigationController?.popViewController(animated: true)
                }])
        }
        
        self.tableView.tableFooterView?.isHidden = true
        self.isLoading = false
    }
    
    func displayPageFinished() {
        self.tableView.reloadData()
    }
    
    
    @IBAction func clearButtonClicked(_ sender: Any) {
        searchBarCancelButtonClicked(self.searchBar)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        let request = NewsList.News.Request(page: 1, query: searchBar.text)
        self.tableView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 1), animated:true)
        interactor?.getNews(request: request)
        if let button = self.navigationItem.rightBarButtonItem {
            button.isEnabled = true
        }
        self.showSpinner(onView: self.view)
        view.endEditing(true)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = ("")
        let request = NewsList.News.Request(page: 1, query: nil)
        self.tableView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 1), animated:true)
        interactor?.getNews(request: request)
        if let button = self.navigationItem.rightBarButtonItem {
            button.isEnabled = false
        }
        self.removeSpinner()
    }
    
}

// MARK: Tableview Handler
extension NewsListViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return router?.dataStore?.articles.count ?? 1
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "NewsCell", for: indexPath) as! NewsCellTableViewCell
        guard let articles = router?.dataStore?.articles else {return cell}
        
        if articles.count == 0 {
            return cell}
        
        cell.setupCell(article: articles[indexPath.row])
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let data = router?.dataStore?.articles else {return}
        interactor?.setSelectedArticle(article: data[indexPath.row])
        performSegue(withIdentifier: "WebView", sender: nil)
    }
    
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let v = UIView()
        v.backgroundColor = .white
        searchBar.placeholder = "Search"
        searchBar.delegate = self
        searchBar.frame = CGRect(x: 0, y: 0, width: (navigationController?.view.bounds.size.width)!, height: 64)
        searchBar.barStyle = .default
        searchBar.isTranslucent = false
        searchBar.barTintColor = UIColor.white
        searchBar.backgroundImage = UIImage()
        v.addSubview(searchBar)
        return v
    }
    
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let height = scrollView.frame.size.height
        let contentYoffset = scrollView.contentOffset.y
        let distanceFromBottom = scrollView.contentSize.height - contentYoffset
        if distanceFromBottom < height && !isLoading {
            isLoading = true
            let request = NewsList.News.Request(page: nil, query: nil)
            interactor?.getNews(request: request)
        }
    }
    
    override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let lastSectionIndex = tableView.numberOfSections - 1
        let lastRowIndex = tableView.numberOfRows(inSection: lastSectionIndex) - 1
        if indexPath.section ==  lastSectionIndex && indexPath.row == lastRowIndex {
            
            guard let isPageFinished = router?.dataStore?.isPageFinished else {return}
            
            if isPageFinished {
                let label = UILabel(frame: CGRect(x: CGFloat(0), y: CGFloat(0), width: tableView.bounds.width, height: CGFloat(44)))
                label.text = "That's all News we had for now"
                label.textColor = .lightGray
                label.sizeToFit()
                label.textAlignment = .center
                self.tableView.tableFooterView = label
                
                return
            }
            
            let spinner = UIActivityIndicatorView(style: .large)
            spinner.startAnimating()
            spinner.backgroundColor = .systemGray
            spinner.frame = CGRect(x: CGFloat(0), y: CGFloat(0), width: tableView.bounds.width, height: CGFloat(44))
            
            self.tableView.tableFooterView = spinner
            self.tableView.tableFooterView?.isHidden = false
        }
    }
}
