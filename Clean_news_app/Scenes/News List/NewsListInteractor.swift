//
//  NewsListInteractor.swift
//  Clean_news_app
//
//  Created by daniel on 18/05/20.
//  Copyright (c) 2020 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsListBusinessLogic
{
    func getNews(request: NewsList.News.Request)
    func addArticles(articles: [Article])
    func setSelectedArticle(article:Article)
    func setNews(news: NewsListModel)
}

protocol NewsListDataStore
{
    var source: Source? {get set}
    var articles: [Article] {get set}
    var query: String? {get set}
    var selectedArticle: Article? {get set}
    var newsList: NewsListModel? {get set}
    var page: Int {get set}
    var isPageFinished: Bool {get set}
}

class NewsListInteractor: NewsListBusinessLogic, NewsListDataStore
{
    
    var presenter: NewsListPresentationLogic?
    var worker: NewsListWorker?
    var source: Source?
    var newsList: NewsListModel?
    var selectedArticle: Article?
    var query: String?
    var page = 1
    var isPageFinished: Bool = false
    var articles: [Article] = []
    
    // MARK: Do something
    
    func getNews(request: NewsList.News.Request)
    {
        worker = NewsListWorker()
        if let query = request.query {
            self.query = query
        } else {
            self.query = ("")
        }
        if let page = request.page {
            articles = []
            self.page = page
        }else {
            let isPageFinished = self.page * 20 >= newsList?.totalResults ?? 0
            if(!isPageFinished) {self.page += 1} else{
                self.isPageFinished = true
                self.presenter?.presentPageFinished()
                return
            }
        }
        
        worker?.getNewsList(query: query,source: source?.id ?? "", date: (Date().addMonth(n: -1)).toStringFormat(.queryFormat), page: self.page, completion: { Data in
            let response = NewsList.News.Response(data: Data)
            self.presenter?.presentNews(response: response)
        })
        
    }
    
    func setNews(news: NewsListModel) {
        newsList = news
    }
    
 
    func addArticles(articles: [Article]) {
        self.articles.append(contentsOf: articles)
    }
    
    func setSelectedArticle(article:Article){
        self.selectedArticle = article
    }
}
