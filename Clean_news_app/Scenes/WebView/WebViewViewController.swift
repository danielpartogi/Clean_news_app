//
//  WebViewViewController.swift
//  Clean_news_app
//
//  Created by daniel on 19/05/20.
//  Copyright (c) 2020 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit
protocol WebViewDisplayLogic: class
{
}

class WebViewViewController: UIViewController, WebViewDisplayLogic, WKNavigationDelegate
{
    var interactor: WebViewBusinessLogic?
    var router: (NSObjectProtocol & WebViewRoutingLogic & WebViewDataPassing)?
    var progressView: UIProgressView?
    
    var webView: WKWebView?
    private var observation: NSKeyValueObservation? = nil
    @IBOutlet weak var webViewUIView: UIView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = WebViewInteractor()
        let router = WebViewRouter()
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        guard let url = URL(string: router?.dataStore?.url ?? "") else {return}
        let config = WKWebViewConfiguration()
        
        webView = WKWebView(frame: view.frame, configuration: config)
        webView?.navigationDelegate = self
        webView?.load(URLRequest(url: url))
        webView?.allowsBackForwardNavigationGestures = true
        
        view = webView
        progressView = UIProgressView(frame: CGRect(x: 1, y: 1, width: view.frame.width, height: 5))
        view.addSubview(progressView!)
        observation = webView?.observe(\.estimatedProgress, options: [.new]) { _, _ in
            self.progressView?.progress = Float(self.webView?.estimatedProgress ?? 0)
            
        }
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        progressView?.isHidden = true
    }
    
    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        progressView?.isHidden = false
    }
    
    deinit {
        observation = nil
    }
}
